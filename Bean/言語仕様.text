Bean補足資料ファイルです。
Bean言語仕様
	Beanを構成するファイル
		エントリポイントとなるファイルと、
		ライブラリとして機能するファイル
		Bean設定ファイル
		の3種類が存在します。

	エントリポイント
		プログラムの中で最初に実行されるコードです。
		クラス宣言、列挙宣言を無制限に配置出来ます。
		use文に加えて、ステートメント(メソッド呼び出し、if, for 等)、関数宣言を配置出来ます。

	ライブラリファイル
		use文によって参照できるファイルです。
		クラス宣言か列挙宣言を配置出来ます。
		一つのファイルに複数の型(クラス|列挙)を定義することは出来ません。

	エンコーディング
		Shift-JIS, UTF-8 のどちらかを選択できます。
		_WIN32	では	Shift-JIS
		_linux	では	UTF-8		が選択されます。

		同梱の .exe は _WIN32 環境でビルドされているので、Shift-JISが使用されます。
		切り替える場合は bean/util/Text.h を編集してリビルドを行います。

	設定ファイル(sys.ini)
		キー = 値 の形式で定義されるファイルです。

	コメント
		// から 行末　もしくは　/* から */
		の間に挿入された文字は無視されます。

	識別子
		クラス名や変数名として使用される文字列は次の規則に従います。
			・予約語と重複しないこと
			・アルファベット もしくは _ で開始すること
			・最初の文字以降は　アルファベット もしくは 数字 もしくは _ が続くこと
		(正規表現で書くなら [A-Za-z_][A-Za-z_0-9]* )

	リテラル
		一部のオブジェクトはコンストラクタを介さずに生成出来ます。
			・100s	Short型の値を 100 で初期化します。
			・100i	Integer型の値を 100 で初期化します。
			・100l	Long型の値を 100 で初期化します。
			・100.0f	Float型の値を 100 で初期化します。
			・100.0d	Double型の値を 100 で初期化します。

		接尾句を省略した場合:
			・100		Integer型の値を 100 で初期化します。
			・100.10	Double型の値を 100.10 で初期化します。

		文字列:
			・'A'		Character型の値を A で初期化します。
						※2バイト文字を初期化することは出来ません。
						　ex: var ch = 'あ'; //syntax error

			・"あいうABC"		String型の値を ABC で初期化します。

		真偽値:
			・true		Boolean型の値を参照します。
			・false		Boolean型の値を参照します。

		未定義値:
			・null		Null型の値を参照します。

		配列:
			・{ x, y, z }	x, y, z を含む配列を作成します。

		ラムダ:
			・lambda() -> { ... };	{ ... } の内側の処理を実行する Delegate型の値を作成します。
	
	使用可能な演算子:
		+	+=	++
		-	-=	--
		*	*=
		/	/=
		%	%=
		|
		||
		&
		&&
		=
		==
		<
		<=
		>
		>=
		!=
		!

		これら以外の演算子は未実装です。
		また、 | || & && は短絡評価であるかどうかの違いのみです。
			   | || & && の引数のどちらかが Boolean型 でないとき、nullを返します。
		if等 で Boolean型 以外の値を評価しようとすると NotBooleanError がスローされます。

	use定義
		use api.Console;

		他のプログラム言語でいうところの import include に該当します。
		この文が読みこまれると指定のクラスが(まだロードされていなければ)ロードされます。
		また、Bean言語では Javaのような完全修飾名によるクラス指定はないので、
		使用するクラスには必ず use定義 が必要になります。

		省略名(api.Console の Console)の衝突を避けるために、 alias定義を使用出来ます。

	alias定義:
		use api.Console;
		alias CLS = api.Console;

		右辺のクラス名を左辺の名前でもアクセスできるようにします。
		右辺は省略名でも構いません。
		どちらの場合でも事前に use定義 が必要です。

		alias定義はそれが定義されたファイルの中でのみ有効です。

	クラス定義
		class ClassName { ... }
		class ClassName : SuperClassName { ... }

		{ ... } に 属性定義, コンストラクタ定義, 関数定義を配置出来ます。
		名前空間は定義されたファイルのパッケージ階層に従います。

		エントリポイントに定義されたクラスは暗黙的に $entrypoint に定義されます。
		ここに定義されるクラスは use 宣言無しでアクセス可能です。

	列挙定義
		enum EnumName { Ident, Ident2... }
		enum EnumName { Ident=10, Ident2="Val"... }

		{ ... } に 列挙子 を配置出来ます。
		名前空間は定義されたファイルのパッケージ階層に従います。

		エントリポイントに定義された列挙は暗黙的に $entrypoint に定義されます。
		ここに定義されるクラスは use 宣言無しでアクセス可能です

		列挙は値を持つことが出来ます。
		明示的に指定しない場合は null で初期化されます。

	修飾子定義:
		[修飾名1 | 修飾名2...]
		修飾名を | で区切って並べます。
		修飾名には public private protected static final native を使用出来ます。
		トップレベルで定義される関数/フィールドには native を指定出来ません。

	属性定義:
		修飾子 @識別子;
		修飾子 @識別子(set=設定名, get=取得名);

		属性の型は不要です。

		セッター/ゲッターを同時に定義出来ます。
		セッター/ゲッターが定義されている場合、その修飾子は最初に宣言された修飾子に従います。
		どちらの場合でもデフォルト値を定義出来ます。

		修飾子 @識別子 = defaultValue;
		修飾子 @識別子(set=設定名, get=取得名) = defaultValue;

	コンストラクタ定義:
		修飾子
		def new(仮引数) { ... }

		修飾子
		def new(仮引数) : this(...) { ... }

		修飾子
		def new(仮引数) : super(...) { ... }

		Java等のコンストラクタとだいたい同じです。
		ただし、nativeなコンストラクタではチェインコンストラクタを定義出来ません。

		コンストラクタが一つもない場合には、
		暗黙的に親へチェインするだけの空のコンストラクタが作成されます。

	関数定義:
		修飾子
		def 識別子(仮引数) { ... }

		戻り値の定義は不要です。
		return がない場合には null が返されます。

	動的メンバー定義:
		オブジェクト::名前 = 値;
		オブジェクト::名前 = lambda() -> { ... };
		
		オブジェクトに動的にフィールド/メソッドを追加する構文です。
		動的に追加されたメンバーは最優先で検索され、
		重複するメソッドが元から定義されていても無視されます。
		privateなメソッドでも上書きされます。

		呼び出し方は標準のメンバーと同様です。

		また、ここで定義されるメンバーは
		public として定義されます。

	関数実行:
		識別子(実引数);

	メソッド実行:
		親クラスのメソッド
			識別子(実引数);
			super.識別子(実引数);
			
		自クラスのメソッド
			識別子(実引数);
			this.識別子(実引数);

		オブジェクトのメソッド
			オブジェクト.識別子(実引数);

		呼び出そうとしているメソッドが見つからなかった場合、
		実行時に NoMethodError がスローされます。

		NullやBoolean型などもClassを持っているのでメソッドを呼び出すことが出来ます。
		なので一応下記のようなコードも合法です。(あまり使い道はありませんが)
			use api.Console;
			use api.Array;

			Console.writeLine(100.toString());
			Console.writeLine((100 + 100).toString());
			Console.writeLine({ 10, 20, 30 }.get(0));
			Console.writeLine(null.toString());
			Console.writeLine(true.toString());
			Console.writeLine(false.toString());

	コマンド:
		bean	ファイル名						指定のファイルを実行します。
		doc		名前空間を含む完全なクラス名	指定のクラスの簡易的な情報を表示します。
		dump	ファイル名						指定のファイルの構文木をダンプします。
		repl									コマンドライン上でBeanを起動します。

	Beanの詳細設定
		Beanではコマンドライン引数をあまり用意していませんが、
		代わりに sys.ini の情報を編集することで挙動を修正出来ます。
		起動時に sys.ini が存在しない場合には同じディレクトリにデフォルト値で作成されます。

		下記はデフォルトで使用されるプロパティですが、
		Systemクラスのメソッドを使用して自由に追加/削除できます。

			bean.defaultIncludeClasses
				エントリポイントから自動でuseされるクラス。
				nullなら何もuseしません。
				複数定義する場合には ,(カンマ)で区切って記述します。
				デフォルトは null です。
				ex:api.Console

			bean.defaultIncludeNamespaces
				エントリポイントから自動でuseされる名前空間
				このとき探索されるファイルでBeanライブラリファイルと認識されなかったものは無視されます。
				nullなら何もuseしません。
				複数定義する場合には ,(カンマ)で区切って記述します。
				デフォルトは api です。
				ex:api

			bean.dev.gcAlways
				GCを常に実行するならtrue
				デフォルトは true です。

			bean.dev.gcIncLimitFullSweeps
				インクリメンタルGCのときに使用されます。
				GCがスイープフェイズを迎えた時にオブジェクトがここで設定されている値を超えていたなら、
				スイープできる全てのオブジェクトを削除します。
				デフォルトは 300 です。

			bean.dev.gcIncMagMarks
				インクリメンタルGCのときに使用されます。
				GCがマークフェイズを迎えたときに一度のGCでいくつのオブジェクトをマークするかを、
				現在のオブジェクト数に対してここで設定されている値を乗算して求めます。
				例えば、0.5が設定されていて現在のオブジェクト数が 100 なら 50個のオブジェクトが一度にマークされます。
				デフォルトは 0.3 です。

			bean.dev.gcIncMagSweeps
				インクリメンタルGCのときに使用されます。
				GCがスイープフェイズを迎えたときに一度のGCでいくつのオブジェクトをスイープするかを、
				現在のオブジェクト数に対してここで設定されている値を乗算して求めます。
				例えば、0.5が設定されていて現在のオブジェクト数が 100 なら 50個のオブジェクトが一度にスイープされます。
				デフォルトは 0.3 です。

			bean.dev.gcIncMinMarks
				インクリメンタルGCのときに使用されます。
				bean.dev.gcIncMagMarksで計算された
				マーク数がここで設定された値より小さい場合、この値に修正されます。
				デフォルトは 50 です。

			bean.dev.gcIncMinSweeps
				インクリメンタルGCのときに使用されます。
				bean.dev.gcIncMagSweepsで計算された
				スイープ数がここで設定された値より小さい場合、この値に修正されます。
				デフォルトは 50 です。

			bean.dev.gcReport
				GCが実行されたときに詳細情報を出力するならtrue
				デフォルトは false です。

			bean.dev.gcThreshold
				GCを実行するための閾値.
				オブジェクトがここで指定された個数を上回ると、GCが実行されます。
				bean.dev.gcAlways が true のとき、この設定は無視されます。
				また、閾値はそれを上回るたびに自動で(現在の個数 + 閾値)で拡張されます。
				デフォルトは 64 です。

			bean.dev.gcType
				GCの種類を設定します。
				0 			なら 	インクリメンタルGC	を実行します。
				それ以外	なら	マークスイープGC	を実行します。
				デフォルトでは 0 です。

			bean.dev.performanceTest
				ファイルを実行したときに経過時間を出力するならtrue
				デフォルトでは false です。

			bean.lib.path
				ライブラリを検索するパス
				デフォルトでは 実行時ディレクトリ です。

	標準APIクラスがロードできない場合
		sys.ini を削除してから再起動すると解決するかもしれません。
		(APIの検索パスは sys.ini から取得するので)
