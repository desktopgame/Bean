/**
 * オフセット/ソース/パターンによって表される実行中の正規表現です.
 */
class Matcher {
	[private]
	def new() { }

	/**
	 * 先頭からマッチします.
	 * ただし以前にマッチを行っていた場合 end() の返す位置から開始します。
	 * @return
	 */
	[public|native]
	def find();
	
	/**
	 * 現在の位置/マッチ位置/マッチ文字列をリセットして、
	 * 指定の位置から前方へ検索を開始します。
	 * マッチしたらマッチ文字列を格納して true を返します。
	 * @return
	 */
	[public|native]
	def find(pos);
	
	/**
	 * 最後にマッチした開始位置を返します.
	 * 一度もマッチしていなければ -1 を返します。
	 * @return
	 */
	[public|native]
	def start();
	
	/**
	 * 最後にマッチした終了位置を返します.
	 * 一度もマッチしていなければ -1 を返します。
	 */
	[public|native]
	def end();
	
	/**
	 * 現在の位置/マッチ位置/マッチ文字列をリセットして、
	 * ソース文字列の先頭からマッチを開始して、最初にマッチしたグループを置換した後の文字列を返します。
	 * このメソッドを呼び出してもこのオブジェクトのソース文字列は置換される前のものである点に注意してください。
	 * @param templ
	 */
	[public|native]
	def replaceFirst(templ);
	
	/**
	 * 現在の位置/マッチ位置/マッチ文字列をリセットして、
	 * マッチするたびにマッチ文字列を temp へ置換します。
	 * マッチするものが見つからなくなると その文字列 を返します。
	 * このメソッドを呼び出してもこのオブジェクトのソース文字列は置換される前のものである点に注意してください。
	 * @param templ
	 */
	[public|native]
	def replaceAll(templ);
	
	/**
	 * 現在の位置/マッチ位置/マッチ文字列をリセットします.
	 */
	[public|native]
	def reset();
	
	/**
	 * 現在の位置/マッチ位置/マッチ文字列をリセットします.
	 * また、このマッチャーの生成に使用されたパターンに対して引数の文字列を割りあてて、
	 * 正規表現エンジンを再び初期化します。
	 * @param src
	 */
	[public|native]
	def reset(src);
	
	/**
	 * 現在の位置/マッチ位置/マッチ文字列をリセットします.
	 * 次に find を呼び出してその値を返します。
	 */
	[public|native]
	def all();
	
	/**
	 * 最後にマッチしたマッチ文字列を返します.
	 * 一度もマッチしていなければ null を返します。
	 * @return
	 */
	[public|native]
	def group();
}